README for ucore riscv32 in ubuntu x86-64

-----------------------------
# prerequirement:
------------------

## Installing riscv-tools

You'll need a forked verison of [riscv-tools](https://github.com/riscv/riscv-tools) to build the toolchain for RV32. Excute the following commands to get started quickly. (tested in ubuntu 16.04 x86-64, 17.10 x86-64)

### 0. setenv
```bash
$ export RISCV=/path/to/install/riscv/toolchain
$ export PATH=$RISCV/bin:$PATH
```

### 1. build gcc/gdb tools (32bit) 
```bash
$ sudo apt-get install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev
$ git clone https://github.com/riscv/riscv-tools.git
$ cd riscv-tools
$ git submodule update --init --recursive
$ cp build-rv32ima.sh build-rv32g.sh
$ vim build-rv32g.sh	# change "rv32ima" to "rv32g", "ilp32" to "ilp32d"
$ chmod +x build-rv32g.sh
$ ./build-rv32g.sh
$ cd ..

### 2. build qemu (32bit)
```bash
$ git clone https://github.com/riscv/riscv-qemu.git
$ cd riscv-qemu
$ ./configure --target-list=riscv32-softmmu
$ make
$ cp riscv32-softmmu/qemu-system-riscv32 $RISCV/bin
$ cd ..
```

### 3. clone ucore+ and riscv-pk
```bash
$ git clone https://github.com/oscourse-tsinghua/OS2018spring-projects-g03
$ cd OS2018spring-projects-g03
$ git clone https://github.com/riscv/riscv-pk
```

------------------
# build
------------------

## clone bbl

$ git submodule update --init --recursive

## update bbl

mv -i ./ucore/mk/mtrap.c ./riscv-pk/machine/mtrap.c

## use riscv-tools

see setenv

## build ucore+
0 cd ucore
1 set kernel configure 
  make ARCH=riscv32 defconfig      // use amd64's default configure
 OR
  sudo apt-get install libncurses5-dev
  make ARCH=riscv32 menuconfig     //do nothing or select custom config, just save&exit
2 build file system 
  make sfsimg                      // build obj/sfs.img
3 build kernel
  make                             // build obj/kernel.img            


NOTICE: no need to build swapimg

------------------
run
------------------
uCore_run -c obj

------------------
debug
------------------
* qemu+gdb

  qemu and gdb do not properly handle mode-switching between 32- and
  64-bit code: once gdb connects in 32-bit mode, it will not switch to
  64-bit mode.  Thus, debugging 64-bit code requires attaching gdb after
  qemu is already executing 64-bit code.  Do not use -S, since that will
  attach in 16-/32-bit mode.

  //In a terminal..
  $ uCore_run -d obj 

  //In a different terminal
  $ cp gdbinit.amd64 .gdbinit
  $ gdb
  ...
  The target architecture is assumed to be i386:x86-64
  0xffffffffc011b5fc in ?? ()
  (gdb) continue

